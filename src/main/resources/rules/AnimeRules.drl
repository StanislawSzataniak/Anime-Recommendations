package com.sample
 
import com.sample.NewGUI.*;
import org.kie.api.runtime.*
import java.util.ArrayList;
 
global com.sample.NewGUI AnimeGUI;
global String CurrentAnswer;

declare Answer
	answer : String
end

declare FinalAnswer
	answers : Answer[]
end

declare UsedAnswer
	answer : String
end

function void askQuestion(String question, Answer[] answers, NewGUI AnimeGUI) {
	String[] ar = new String[answers.length];
	for (int i = 0; i < answers.length; i++) {
		ar[i] = answers[i].getAnswer();
	}
	AnimeGUI.newFrame(question, ar);
}

rule "init"
	when
		s : String()
		not UsedAnswer(answer == s)
	then
		insert (new Answer(s));
end

rule "Start"
    when
    	a : Answer(answer.equals("Start"))
    	not UsedAnswer(answer == a.getAnswer())
    then
		String question = "What kind of series are you looking for?";
		Answer[] answers = {new Answer("A good start"), new Answer("A classic"), new Answer("Series? What if I want a movie?"), new Answer("Something ambitious")};
		askQuestion(question, answers, AnimeGUI);
		insert (new UsedAnswer(a.getAnswer()));
end

rule "End"
	when
		f : FinalAnswer()
	then
		askQuestion("Your result", f.getAnswers(), AnimeGUI);
		AnimeGUI.kLogger.close();
end


rule "A good start"
	when
        a : Answer( answer.equals("A good start"))
        not UsedAnswer(answer == a.getAnswer())
    then 
    	Answer[] answers = {new Answer("Fullmetal Alchemist: Brotherhood")};
    	insert (new FinalAnswer (answers));
    	insert (new UsedAnswer(a.getAnswer()));
end   	
    	
    	
rule "A classic"
	when
        a : Answer( answer.equals("A classic"))
        not UsedAnswer( answer == a.getAnswer() )
    then 
    	Answer[] answers = {new Answer("Cowboy Bebop")};
    	insert (new FinalAnswer (answers));
    	insert (new UsedAnswer(a.getAnswer()));
end
    	

rule "Something ambitious"
	when
        a : Answer( answer.equals("Something ambitious"))
        not UsedAnswer( answer == a.getAnswer() )
    then 
    	Answer[] answers ={new Answer("Thriller"), new Answer("Drama")};
		String question = "Intensive or calm?";
    	askQuestion(question, answers, AnimeGUI);
    	insert (new UsedAnswer(a.getAnswer()));
end

rule "Thriller"
	when
        a : Answer( answer.equals("Thriller"))
        not UsedAnswer( answer == a.getAnswer() )
    then 
    	Answer[] answers ={new Answer("Popular flicks"), new Answer("Let's go heavy"), new Answer("Solid science fiction")};
    	String question = "Popular stuff or good stuff?";
    	askQuestion(question, answers, AnimeGUI);
    	insert (new UsedAnswer(a.getAnswer()));
end

rule "Popular flicks"
	when
        a : Answer( answer.equals("Popular flicks"))
        not UsedAnswer( answer == a.getAnswer() )
    then 
    	Answer[] answers ={new Answer("Hunger games"), new Answer("Aliens"), new Answer("Crime drama mindgames with Grim Reaper"), new Answer("Terrorists")};
    	String question = "Main theme?";
    	askQuestion(question, answers, AnimeGUI);
    	insert (new UsedAnswer(a.getAnswer()));
end     	
    	
rule "Crime drama mindgames with Grim Reaper"
	when
        a : Answer( answer.equals("Crime drama mindgames with Grim Reaper"))
        not UsedAnswer( answer == a.getAnswer() )
    then 
    	Answer[] answers ={new Answer("Death note")};
    	insert (new FinalAnswer (answers));
    	insert (new UsedAnswer(a.getAnswer()));
end  
    	
rule "Aliens"
	when
        a : Answer( answer.equals("Aliens"))
        not UsedAnswer( answer == a.getAnswer() )
    then 
    	Answer[] answers ={new Answer("Parasyte")};
    	insert (new FinalAnswer (answers));
    	insert (new UsedAnswer(a.getAnswer()));
end  
    	
rule "Terrorists"
	when
        a : Answer( answer.equals("Terrorists"))
        not UsedAnswer( answer == a.getAnswer() )
    then 
    	Answer[] answers ={new Answer("Zankyou no Terror")};
    	insert (new FinalAnswer (answers));
    	insert (new UsedAnswer(a.getAnswer()));
end

rule "Hunger games"
	when
        a : Answer( answer.equals("Hunger games"))
        not UsedAnswer( answer == a.getAnswer() )
    then 
    	Answer[] answers = {new Answer("Mirai Nikki")};
    	insert (new FinalAnswer (answers));
    	insert (new UsedAnswer(a.getAnswer()));
end      	
    	
rule "Solid science fiction"
	when
        a : Answer( answer.equals("Popular flicks"))
        not UsedAnswer( answer == a.getAnswer() )
    then 
    	Answer[] answers ={new Answer("Time travel experiment"), new Answer("Psychological police dystopia")};
    	String question = "Contemporary or futuristic?";
    	askQuestion(question, answers, AnimeGUI);
    	insert (new UsedAnswer(a.getAnswer()));
end

rule "Time travel experiment"
	when
        a : Answer( answer.equals("Time travel experiment"))
        not UsedAnswer( answer == a.getAnswer() )
    then 
    	Answer[] answers = {new Answer("Steins;Gate")};
    	insert (new FinalAnswer (answers));
    	insert (new UsedAnswer(a.getAnswer()));
end

rule "Psychological police dystopia"
	when
        a : Answer( answer.equals("Psychological police dystopia"))
        not UsedAnswer( answer == a.getAnswer() )
    then 
    	Answer[] answers = {new Answer("Psycho-Pass")};
    	insert (new FinalAnswer (answers));
    	insert (new UsedAnswer(a.getAnswer()));
end   

rule "Let's go heavy"
	when
        a : Answer( answer.equals("Let's go heavy"))
        not UsedAnswer( answer == a.getAnswer() )
    then 
    	Answer[] answers = {new Answer("Crime drama"), new Answer("Gambling"), new Answer("I'm ready")};
    	String question = "Pick your psychological thriller";
    	askQuestion(question, answers, AnimeGUI);
    	insert (new UsedAnswer(a.getAnswer()));
end        	

rule "Crime drama"
	when
		
        a : Answer( answer.equals("Crime drama"))
        not UsedAnswer( answer == a.getAnswer() )
    then 
    	Answer[] answers = {new Answer("Monster")};
    	insert (new FinalAnswer (answers));
    	insert (new UsedAnswer(a.getAnswer()));
end

rule "Gambling"
	when
		
        a : Answer( answer.equals("Gambling"))
        not UsedAnswer( answer == a.getAnswer() )
    then 
    	Answer[] answers = {new Answer("Kaiji")};
    	insert (new FinalAnswer (answers));
    	insert (new UsedAnswer(a.getAnswer()));
end

rule "I'm ready"
	when
		
        a : Answer( answer.equals("I'm ready"))
        not UsedAnswer( answer == a.getAnswer() )
    then 
    	Answer[] answers = {new Answer("Magical girls"), new Answer("Mechas")};
    	String question = "No you're not";
    	askQuestion(question, answers, AnimeGUI);
    	insert (new UsedAnswer(a.getAnswer()));
end

rule "Magical girls"
	when
        a : Answer( answer.equals("Magical girls"))
        not UsedAnswer( answer == a.getAnswer() )
    then 
    	Answer[] answers = {new Answer("Madoka Magica"), new Answer("Yuuki Yuuna")};
    	insert (new FinalAnswer (answers));
    	insert (new UsedAnswer(a.getAnswer()));
end
 
rule "Mechas"
	when
        a : Answer( answer.equals("Mechas"))
        not UsedAnswer( answer == a.getAnswer() )
    then 
    	Answer[] answers = {new Answer("Neon Genesis Evangelion")};
    	insert (new FinalAnswer (answers));
    	insert (new UsedAnswer(a.getAnswer()));
end

