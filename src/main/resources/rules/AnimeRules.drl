package com.sample
 
import com.sample.NewGUI.*;
import org.kie.api.runtime.*
import java.util.ArrayList;
 
global com.sample.NewGUI AnimeGUI;
global String CurrentAnswer;

/*declare Question
	question : String
	answers : Answer[]
	status : int
end*/

declare Answer
	answer : String
end

declare FinalAnswer
	answers : Answer[]
end

declare UsedAnswer
	answer : String
end

function void askQuestion(String question, Answer[] answers, NewGUI AnimeGUI) {
	String[] ar = new String[answers.length];
	for (int i = 0; i < answers.length; i++) {
		ar[i] = answers[i].getAnswer();
	}
	AnimeGUI.newFrame(question, ar);
}

rule "init"
	when
		s : String()
		not UsedAnswer(answer == s)
	then
		insert (new Answer(s));
end

rule "Start"
    when
    	a : Answer(answer.equals("Start"))
    	not UsedAnswer(answer == a.getAnswer())
    then
		String question = "What kind of series are you looking for?";
		Answer[] answers = {new Answer("A good start"), new Answer("A classic"), new Answer("Series? What if I want a movie?"), new Answer("Something ambitious")};
		askQuestion(question, answers, AnimeGUI);
		insert (new UsedAnswer(a.getAnswer()));
end

rule "End"
	when
		f : FinalAnswer()
	then
		askQuestion("Your result", f.getAnswers(), AnimeGUI);
		AnimeGUI.kLogger.close();
end


rule "A good start"
	when
        a : Answer( answer.equals("A good start"))
        not UsedAnswer(answer == a.getAnswer())
    then 
    	Answer[] answers = {new Answer("Fullmetal Alchemist: Brotherhood")};
    	insert (new FinalAnswer (answers));
    	insert (new UsedAnswer(a.getAnswer()));
end   	
    	
    	
rule "A classic"
	when
        a : Answer( answer.equals("A classic"))
        not UsedAnswer( answer == a.getAnswer() )
    then 
    	Answer[] answers = {new Answer("Cowboy Bebop")};
    	insert (new FinalAnswer (answers));
    	insert (new UsedAnswer(a.getAnswer()));
end
    	

rule "Something ambitious"
	when
        a : Answer( answer.equals("Something ambitious"))
        not UsedAnswer( answer == a.getAnswer() )
    then 
    	Answer[] answers ={new Answer("Thriller"), new Answer("Drama")};
		String question = "Intensive or calm?";
    	askQuestion(question, answers, AnimeGUI);
    	insert (new UsedAnswer(a.getAnswer()));
end

rule "Thriller"
	when
        a : Answer( answer.equals("Thriller"))
        not UsedAnswer( answer == a.getAnswer() )
    then 
    	Answer[] answers ={new Answer("Popular flicks"), new Answer("Let's go heavy"), new Answer("Solid science fiction")};
    	String question = "Popular stuff or good stuff?";
    	askQuestion(question, answers, AnimeGUI);
    	insert (new UsedAnswer(a.getAnswer()));
end

rule "Popular flicks"
	when
        a : Answer( answer.equals("Popular flicks"))
        not UsedAnswer( answer == a.getAnswer() )
    then 
    	Answer[] answers ={new Answer("Hunger games"), new Answer("Aliens"), new Answer("Crime drama mindgames with Grim Reaper"), new Answer("Terrorists")};
    	String question = "Main theme?";
    	askQuestion(question, answers, AnimeGUI);
    	insert (new UsedAnswer(a.getAnswer()));
end     	
    	
rule "Crime drama mindgames with Grim Reaper"
	when
        a : Answer( answer.equals("Crime drama mindgames with Grim Reaper"))
        not UsedAnswer( answer == a.getAnswer() )
    then 
    	Answer[] answers ={new Answer("Death note")};
    	insert (new FinalAnswer (answers));
    	insert (new UsedAnswer(a.getAnswer()));
end  
    	
rule "Aliens"
	when
        a : Answer( answer.equals("Aliens"))
        not UsedAnswer( answer == a.getAnswer() )
    then 
    	Answer[] answers ={new Answer("Parasyte")};
    	insert (new FinalAnswer (answers));
    	insert (new UsedAnswer(a.getAnswer()));
end  
    	
rule "Terrorists"
	when
        a : Answer( answer.equals("Terrorists"))
        not UsedAnswer( answer == a.getAnswer() )
    then 
    	Answer[] answers ={new Answer("Zankyou no Terror")};
    	insert (new FinalAnswer (answers));
    	insert (new UsedAnswer(a.getAnswer()));
end

rule "Hunger games"
	when
        a : Answer( answer.equals("Hunger games"))
        not UsedAnswer( answer == a.getAnswer() )
    then 
    	Answer[] answers = {new Answer("Mirai Nikki")};
    	insert (new FinalAnswer (answers));
    	insert (new UsedAnswer(a.getAnswer()));
end      	
    	
rule "Solid science fiction"
	when
        a : Answer( answer.equals("Popular flicks"))
        not UsedAnswer( answer == a.getAnswer() )
    then 
    	Answer[] answers ={new Answer("Time travel experiment"), new Answer("Psychological police dystopia")};
    	String question = "Contemporary or futuristic?";
    	askQuestion(question, answers, AnimeGUI);
    	insert (new UsedAnswer(a.getAnswer()));
end

rule "Time travel experiment"
	when
        a : Answer( answer.equals("Time travel experiment"))
        not UsedAnswer( answer == a.getAnswer() )
    then 
    	Answer[] answers = {new Answer("Steins;Gate")};
    	insert (new FinalAnswer (answers));
    	insert (new UsedAnswer(a.getAnswer()));
end

rule "Psychological police dystopia"
	when
        a : Answer( answer.equals("Psychological police dystopia"))
        not UsedAnswer( answer == a.getAnswer() )
    then 
    	Answer[] answers = {new Answer("Psycho-Pass")};
    	insert (new FinalAnswer (answers));
    	insert (new UsedAnswer(a.getAnswer()));
end   

rule "Let's go heavy"
	when
        a : Answer( answer.equals("Let's go heavy"))
        not UsedAnswer( answer == a.getAnswer() )
    then 
    	Answer[] answers = {new Answer("Crime drama"), new Answer("Gambling"), new Answer("I'm ready")};
    	String question = "Pick your psychological thriller";
    	askQuestion(question, answers, AnimeGUI);
    	insert (new UsedAnswer(a.getAnswer()));
end        	

rule "Crime drama"
	when
		
        a : Answer( answer.equals("Crime drama"))
        not UsedAnswer( answer == a.getAnswer() )
    then 
    	Answer[] answers = {new Answer("Monster")};
    	insert (new FinalAnswer (answers));
    	insert (new UsedAnswer(a.getAnswer()));
end

rule "Gambling"
	when
		
        a : Answer( answer.equals("Gambling"))
        not UsedAnswer( answer == a.getAnswer() )
    then 
    	Answer[] answers = {new Answer("Kaiji")};
    	insert (new FinalAnswer (answers));
    	insert (new UsedAnswer(a.getAnswer()));
end

rule "I'm ready"
	when
		
        a : Answer( answer.equals("I'm ready"))
        not UsedAnswer( answer == a.getAnswer() )
    then 
    	Answer[] answers = {new Answer("Magical girls"), new Answer("Mechas")};
    	String question = "No you're not";
    	askQuestion(question, answers, AnimeGUI);
    	insert (new UsedAnswer(a.getAnswer()));
end

rule "Magical girls"
	when
        a : Answer( answer.equals("Magical girls"))
        not UsedAnswer( answer == a.getAnswer() )
    then 
    	Answer[] answers = {new Answer("Madoka Magica"), new Answer("Yuuki Yuuna")};
    	insert (new FinalAnswer (answers));
    	insert (new UsedAnswer(a.getAnswer()));
end
 
rule "Mechas"
	when
        a : Answer( answer.equals("Mechas"))
        not UsedAnswer( answer == a.getAnswer() )
    then 
    	Answer[] answers = {new Answer("Neon Genesis Evangelion")};
    	insert (new FinalAnswer (answers));
    	insert (new UsedAnswer(a.getAnswer()));
end

rule "Drama"
	when
        a : Answer( answer.equals("Drama"))
        not UsedAnswer( answer == a.getAnswer() )
    then 
    	Answer[] answers ={new Answer("FEELS"), new Answer("Serious story")};
    	String question = "And by drama you mean...";
    	askQuestion(question, answers, AnimeGUI);
    	insert (new UsedAnswer(a.getAnswer()));
end

rule "FEELS"
	when
        a : Answer( answer.equals("FEELS"))
        not UsedAnswer( answer == a.getAnswer() )
    then 
    	Answer[] answers ={new Answer("Happy, fluffy and cute"), new Answer("Warm and bittersweet"), new Answer("I've got tissues")};
    	String question = "What kind of feels?";
    	askQuestion(question, answers, AnimeGUI);
    	insert (new UsedAnswer(a.getAnswer()));
end

rule "Happy, fluffy and cute"
	when
        a : Answer( answer.equals("Happy, fluffy and cute"))
        not UsedAnswer( answer == a.getAnswer() )
    then 
    	Answer[] answers ={new Answer("Jesus no"), new Answer("...what?")};
    	String question = "PTSD?";
    	askQuestion(question, answers, AnimeGUI);
    	insert (new UsedAnswer(a.getAnswer()));
end

rule "Jesus no"
	when
        a : Answer( answer.equals("Jesus no"))
        not UsedAnswer( answer == a.getAnswer() )
    then 
    	Answer[] answers = {new Answer("K-On!"), new Answer("Aria"), new Answer("Barakamon"), new Answer("Lucky Star")};
    	insert (new FinalAnswer (answers));
    	insert (new UsedAnswer(a.getAnswer()));
end

rule "...what?"
	when
        a : Answer( answer.equals("...what?"))
        not UsedAnswer( answer == a.getAnswer() )
    then 
    	Answer[] answers = {new Answer("Yuuki Yuuna"), new Answer("Madoka Magica"), new Answer("Sora no Woto")};
    	insert (new FinalAnswer (answers));
    	insert (new UsedAnswer(a.getAnswer()));
end

rule "Warm and bittersweet"
	when
        a : Answer( answer.equals("Warm and bittersweet"))
        not UsedAnswer( answer == a.getAnswer() )
    then 
    	Answer[] answers = {new Answer("Sakurasou no Pet no Kanojo"), new Answer("Hanasaku Iroha")};
    	insert (new FinalAnswer (answers));
    	insert (new UsedAnswer(a.getAnswer()));
end

rule "I've got tissues"
	when
        a : Answer( answer.equals("I've got tissues"))
        not UsedAnswer( answer == a.getAnswer() )
    then 
    	Answer[] answers ={new Answer("Something shorter?"), new Answer("Maybe"), new Answer("Bring it on")};
    	String question = "Ready to endure through slow bulldup";
    	askQuestion(question, answers, AnimeGUI);
    	insert (new UsedAnswer(a.getAnswer()));
end

rule "Something shorter?"
	when
        a : Answer( answer.equals("Something shorter?"))
        not UsedAnswer( answer == a.getAnswer() )
    then 
    	Answer[] answers = {new Answer("Angel Beats!"), new Answer("Haibane Renmei")};
    	insert (new FinalAnswer (answers));
    	insert (new UsedAnswer(a.getAnswer()));
end

rule "Maybe"
	when
        a : Answer( answer.equals("Maybe"))
        not UsedAnswer( answer == a.getAnswer() )
    then 
    	Answer[] answers ={new Answer("Kids reuniting years after death of a childhood frined"), new Answer("Young pianist struggling after losing his mother")};
    	String question = "Overcoming grief?";
    	askQuestion(question, answers, AnimeGUI);
    	insert (new UsedAnswer(a.getAnswer()));
end

rule "Kids reuniting years after death of a childhood frined"
	when
        a : Answer( answer.equals("Kids reuniting years after death of a childhood frined"))
        not UsedAnswer( answer == a.getAnswer() )
    then 
    	Answer[] answers = {new Answer("AnoHana")};
    	insert (new FinalAnswer (answers));
    	insert (new UsedAnswer(a.getAnswer()));
end

rule "Young pianist struggling after losing his mother"
	when
        a : Answer( answer.equals("Young pianist struggling after losing his mother"))
        not UsedAnswer( answer == a.getAnswer() )
    then 
    	Answer[] answers = {new Answer("Your Lie in April")};
    	insert (new FinalAnswer (answers));
    	insert (new UsedAnswer(a.getAnswer()));
end

rule "Bring it on"
	when
        a : Answer( answer.equals("Bring it on"))
        not UsedAnswer( answer == a.getAnswer() )
    then 
    	Answer[] answers = {new Answer("Clannad"), new Answer("Clannad: After Story")};
    	insert (new FinalAnswer (answers));
    	insert (new UsedAnswer(a.getAnswer()));
end

rule "Serious story"
	when
        a : Answer( answer.equals("Serious story"))
        not UsedAnswer( answer == a.getAnswer() )
    then 
    	Answer[] answers ={new Answer("Road trip"), new Answer("Postapocalyptical rural utopia"), new Answer("Science fiction")};
    	String question = "Genre?";
    	askQuestion(question, answers, AnimeGUI);
    	insert (new UsedAnswer(a.getAnswer()));
end

rule "Road trip"
	when
        a : Answer( answer.equals("Road trip"))
        not UsedAnswer( answer == a.getAnswer() )
    then 
    	Answer[] answers ={new Answer("Medieval Europe and its economy"), new Answer("Rulal Japan and spirit stuff")};
    	String question = "Setting?";
    	askQuestion(question, answers, AnimeGUI);
    	insert (new UsedAnswer(a.getAnswer()));
end

rule "Medieval Europe and its economy"
	when
        a : Answer( answer.equals("Medieval Europe and its economy"))
        not UsedAnswer( answer == a.getAnswer() )
    then 
    	Answer[] answers = {new Answer("Spice&Wolf")};
    	insert (new FinalAnswer (answers));
    	insert (new UsedAnswer(a.getAnswer()));
end

rule "Rulal Japan and spirit stuff"
	when
        a : Answer( answer.equals("Rulal Japan and spirit stuff"))
        not UsedAnswer( answer == a.getAnswer() )
    then 
    	Answer[] answers = {new Answer("Mushishi")};
    	insert (new FinalAnswer (answers));
    	insert (new UsedAnswer(a.getAnswer()));
end

rule "Postapocalyptical rural utopia"
	when
        a : Answer( answer.equals("Postapocalyptical rural utopia"))
        not UsedAnswer( answer == a.getAnswer() )
    then 
    	Answer[] answers = {new Answer("Shinsekai yori")};
    	insert (new FinalAnswer (answers));
    	insert (new UsedAnswer(a.getAnswer()));
end

rule "Science fiction"
	when
        a : Answer( answer.equals("Science fiction"))
        not UsedAnswer( answer == a.getAnswer() )
    then 
    	Answer[] answers ={new Answer("Hard existential sci-fi"),  new Answer("Old sci-fi space opera epic"), new Answer("Life of space garbage collectors"),};
    	String question = "How deep do we go?";
    	askQuestion(question, answers, AnimeGUI);
    	insert (new UsedAnswer(a.getAnswer()));
end

rule "Hard existential sci-fi"
	when
        a : Answer( answer.equals("Hard existential sci-fi"))
        not UsedAnswer( answer == a.getAnswer() )
    then 
    	Answer[] answers = {new Answer("Ergo Proxy"), new Answer("Serial Experiments Lain"), new Answer("Texnoholyze")};
    	insert (new FinalAnswer (answers));
    	insert (new UsedAnswer(a.getAnswer()));
end

rule "Old sci-fi space opera epic"
	when
        a : Answer( answer.equals("Old sci-fi space opera epic"))
        not UsedAnswer( answer == a.getAnswer() )
    then 
    	Answer[] answers = {new Answer("Legend of the Galactic Heroes")};
    	insert (new FinalAnswer (answers));
    	insert (new UsedAnswer(a.getAnswer()));
end

rule "Life of space garbage collectors"
	when
        a : Answer( answer.equals("Life of space garbage collectors"))
        not UsedAnswer( answer == a.getAnswer() )
    then 
    	Answer[] answers = {new Answer("Planetes")};
    	insert (new FinalAnswer (answers));
    	insert (new UsedAnswer(a.getAnswer()));
end


rule "Series? What if I want a movie?"
	when
        a : Answer( answer.equals("Series? What if I want a movie?"))
        not UsedAnswer( answer == a.getAnswer() )
    then 
    	Answer[] answers = {new Answer("We'd need an entire new chart")};
    	insert (new FinalAnswer (answers));
    	insert (new UsedAnswer(a.getAnswer()));
end